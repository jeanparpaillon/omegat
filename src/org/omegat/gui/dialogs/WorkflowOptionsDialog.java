/**************************************************************************
 OmegaT - Java based Computer Assisted Translation (CAT) tool
 Copyright (C) 2002-2005  Keith Godfrey et al
                          keithgodfrey@users.sourceforge.net
                          907.223.2039

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
**************************************************************************/

package org.omegat.gui.dialogs;

import java.awt.Frame;
import javax.swing.JDialog;
import javax.swing.JLabel;
import org.omegat.util.OStrings;
import org.omegat.util.Preferences;

/**
 *
 * @author  Maxym Mykhalchuk
 */
public class WorkflowOptionsDialog extends JDialog
{
    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;
    
    /** Creates new form WorkflowOptionsDialog */
    public WorkflowOptionsDialog(Frame parent)
    {
        super(parent, true);
        initComponents();
        
        // initializing options
        doNotCopySourceTextCheckBox.setSelected(Preferences.isPreference(Preferences.DONT_INSERT_SOURCE_TEXT));
        insertBestMatchCheckBox.setSelected(Preferences.isPreference(Preferences.BEST_MATCH_INSERT));
        minimalSimilaritySpinner.setValue(new Integer(Preferences.getPreferenceDefault(Preferences.BEST_MATCH_MINIMAL_SIMILARITY, Preferences.BEST_MATCH_MINIMAL_SIMILARITY_DEFAULT)));
        minimalSimilaritySpinner.setEnabled(insertBestMatchCheckBox.isSelected());
        insertExplanatoryTextCheckBox.setSelected(Preferences.isPreference(Preferences.BEST_MATCH_EXPLANATORY_TEXT));
        insertExplanatoryTextCheckBox.setEnabled(insertBestMatchCheckBox.isSelected());
        
        invalidate();
        pack();
    }
    
    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus()
    {
        return returnStatus;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        doNotCopySourceTextCheckBox = new javax.swing.JCheckBox();
        insertBestMatchCheckBox = new javax.swing.JCheckBox();
        minimalSimilarityLabel = new javax.swing.JLabel();
        minimalSimilaritySpinner = new javax.swing.JSpinner();
        descriptionTextArea = new javax.swing.JTextArea();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        insertExplanatoryTextCheckBox = new javax.swing.JCheckBox();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle(OStrings.getString("GUI_TITLE_Workflow_Options"));
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                closeDialog(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(doNotCopySourceTextCheckBox, OStrings.getString("GUI_WORKFLOW_OPTION_Dont_copy_source_text_into_target_field"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(doNotCopySourceTextCheckBox, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(insertBestMatchCheckBox, OStrings.getString("GUI_WORKFLOW_OPTION_Insert_best_fuzzy_match_into_target_field"));
        insertBestMatchCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                insertBestMatchCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(insertBestMatchCheckBox, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(minimalSimilarityLabel, OStrings.getString("GUI_WORKFLOW_OPTION_Minimal_Similarity"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 14, 4, 4);
        getContentPane().add(minimalSimilarityLabel, gridBagConstraints);

        minimalSimilaritySpinner.setEnabled(false);
        minimalSimilaritySpinner.setValue(new Integer(90));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(minimalSimilaritySpinner, gridBagConstraints);

        descriptionTextArea.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));
        descriptionTextArea.setEditable(false);
        descriptionTextArea.setFont(new JLabel().getFont());
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setText(OStrings.getString("GUI_WORKFLOW_DESCRIPTION"));
        descriptionTextArea.setWrapStyleWord(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(descriptionTextArea, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(okButton, OStrings.getString("BUTTON_OK"));
        okButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                okButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(12, 4, 4, 4);
        getContentPane().add(okButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, OStrings.getString("BUTTON_CANCEL"));
        cancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(12, 4, 4, 4);
        getContentPane().add(cancelButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(insertExplanatoryTextCheckBox, OStrings.getString("GUI_WORKFLOW_OPTION_NO_EXPLANATORY_TEXT"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 14, 4, 4);
        getContentPane().add(insertExplanatoryTextCheckBox, gridBagConstraints);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }
    // </editor-fold>//GEN-END:initComponents

    private void insertBestMatchCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_insertBestMatchCheckBoxActionPerformed
    {//GEN-HEADEREND:event_insertBestMatchCheckBoxActionPerformed
        minimalSimilaritySpinner.setEnabled(insertBestMatchCheckBox.isSelected());
        insertExplanatoryTextCheckBox.setEnabled(insertBestMatchCheckBox.isSelected());
    }//GEN-LAST:event_insertBestMatchCheckBoxActionPerformed
    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okButtonActionPerformed
    {
        Preferences.setPreference(Preferences.DONT_INSERT_SOURCE_TEXT, doNotCopySourceTextCheckBox.isSelected());
        Preferences.setPreference(Preferences.BEST_MATCH_INSERT, insertBestMatchCheckBox.isSelected());
        Preferences.setPreference(Preferences.BEST_MATCH_MINIMAL_SIMILARITY, minimalSimilaritySpinner.getValue().toString());
        Preferences.setPreference(Preferences.BEST_MATCH_EXPLANATORY_TEXT, insertExplanatoryTextCheckBox.isSelected());
        
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt)//GEN-FIRST:event_closeDialog
    {
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog
    
    private void doClose(int retStatus)
    {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JCheckBox doNotCopySourceTextCheckBox;
    private javax.swing.JCheckBox insertBestMatchCheckBox;
    private javax.swing.JCheckBox insertExplanatoryTextCheckBox;
    private javax.swing.JLabel minimalSimilarityLabel;
    private javax.swing.JSpinner minimalSimilaritySpinner;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
    
    private int returnStatus = RET_CANCEL;
}
