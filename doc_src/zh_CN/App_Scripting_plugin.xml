<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../docbook-xml-4.5/docbookx.dtd">
<appendix id="appendix.ScriptingPlugin.inOmegaT">
  <title>脚本化插件<indexterm class="singular">
      <primary>插件</primary> <secondary>脚本化</secondary>
    </indexterm></title>

  <section>
    <title>介绍</title>

    <para>OmegaT-脚本化支持在OmegaT中运行一些脚本语言编写的脚本。</para>
  </section>

  <section>
    <title>安装和使用</title>

    <para>OmegaT的脚本化插件可以从<ulink url="http://sourceforge.net/projects/omegat-plugins/files">OmegaT插件下载站</ulink>下载。然后解压文件并把它们放到OmegaT安装目录（即包含OmegaT.jar的目录）的“plugins”文件夹中。若不存在，则首先创建“plugins”文件夹。</para>

    <para>这样会增加<guisubmenu>工具&gt; </guisubmenu><guisubmenu>脚本</guisubmenu>子菜单。在<guisubmenu>脚本</guisubmenu>子菜单下，有12个放脚本的位置。点击<guisubmenu>脚本</guisubmenu>会打开脚本对话框：<screenshot> <screeninfo>脚本对话框</screeninfo> <mediaobject> <imageobject> <imagedata fileref="images/ScriptingDialog.png"/> </imageobject> </mediaobject> </screenshot></para>

    <para>您可在脚本对话框中加载已有的脚本到文本区并对当前打开的项目运行该脚本。要定制脚本功能，请执行以下操作：</para>

    <itemizedlist>
      <listitem>
        <para>点击左面板列表中的脚本名称加载脚本到编辑器中。</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>右键点击底面板中的“&lt;1&gt;”到“&lt;12&gt;”按钮并选择“添加”。在上面的例子中，已添加了两个脚本（位置1和2）。</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>当您左键点击数字时，将运行选择的脚本。您还可以点击<guisubmenu>工具</guisubmenu>菜单下的脚本条目或按<keycap> Ctrl+Alt+F#</keycap>（#表示1到12）组合键运行选择的宏。</para>
      </listitem>
    </itemizedlist>

    <para>目前已支持下列脚本语言：</para>

    <para><itemizedlist>
        <listitem>
          <para><emphasis role="bold">NetRexx</emphasis>（http://www.netrexx.org/）：它支持经典的REXX语法、无保留关键字，还包含了兼容Java对象模型的面向对象编程风格的重要附加支持。所有现有的Java类库可以无需修改和特殊设置而直接使用；在一些情况下Java程序员可以选择在运行时包中使用Rexx类以获得在Java语法的源程序中增强的字符串处理功能。</para>
        </listitem>
      </itemizedlist><itemizedlist>
        <listitem>
          <para><emphasis role="bold">XSLT</emphasis>（扩展样式表语言转换）：是用于转换XML文档的基于XML的描述性语言。原始的文档没有改变，不过基于原有文档的内容创建了新文档。新文档可能是由处理程序以标准的XML语法或其他格式串行化的，例如HTML或纯文本。XSLT最常用于在不同的XML模式转换数据或把XML数据转换为网页或PDF文档。</para>
        </listitem>
      </itemizedlist><itemizedlist>
        <listitem>
          <para><emphasis role="bold">Groovy</emphasis>（http://groovy.codehaus.org）：是用于Java虚拟机的动态语言。它构建于增强的Java之上，含有从Python、Ruby和Smalltalk等语言获得灵感而实现的附加强大功能。</para>
        </listitem>
      </itemizedlist><itemizedlist>
        <listitem>
          <para><emphasis role="bold">JavaScript</emphasis>（不会与Java混淆时简写为JS）：是动态、弱类型且具有一类函数的基于原型的脚本语言。它是多范型语言，支持面向对象、命令和函数式编程风格。它工作于像Firefox这样流行软件的后台，是开源领域中常见和首选的编程工具。</para>
        </listitem>
      </itemizedlist>所有的语言都能访问OmegaT对象模型，其中的顶级对象为项目。例如下面的groovy代码片段扫描当前项目所有文件中的所有片段，且当某个片段的翻译存在时打印出它的源和目标译文：</para>

    <programlisting>    files = project.projectFiles;
    for (i in 0 ..&lt; files.size())
    {
        for (j in 0 ..&lt; files[i].entries.size())
        {
            currSegment = files[i].entries[j];
            if (project.getTranslationInfo(currSegment))
            {
                source = currSegment.getSrcText();
                target = project.getTranslationInfo(currSegment).translation;
                console.println(source + &quot; &gt;&gt;&gt;&gt; &quot; + target);
            }     
        }
    }</programlisting>
  </section>
</appendix>